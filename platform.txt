# Copyright (c) 2014-2015 Arduino LLC.  All right reserved.
# Copyright (c) 2016 Sandeep Mistry All right reserved.
# Copyright (c) 2017 Adafruit Industries.  All rights reserved.
# Copyright (c) 2020 Shenzhen RAKwireless Technology Co., Ltd. All rights reserved     
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

name=RAKwireless RUI APOLLO3 Modules

# Compile variables
# -----------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wno-pointer-arith

# Allow changing optimization settings via platform.local.txt / boards.local.txt
compiler.optimization_flag=-Os

compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-mcpu={build.mcu} -mthumb -c -g {compiler.warning_flags} {build.float_flags} -std=gnu11 -ffunction-sections -fdata-sections --param max-inline-insns-single=500 -nostdlib -fno-use-cxa-atexit -MMD
compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.c.elf.flags={compiler.optimization_flag} -Wl,--gc-sections -save-temps
compiler.S.cmd=arm-none-eabi-gcc
compiler.S.flags=-c -g -x assembler-with-cpp
compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-mcpu={build.mcu} -mthumb -c -g {compiler.warning_flags} {build.float_flags} -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -nostdlib -fno-use-cxa-atexit -MMD
compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2bin.flags=-O binary -S
compiler.elf2bin.cmd=arm-none-eabi-objcopy
compiler.elf2hex.flags=-O ihex
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.ldflags=-mcpu={build.mcu} -mthumb {build.float_flags} -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--unresolved-symbols=report-all -Wl,--warn-common --specs=nano.specs --specs=nosys.specs -nostartfiles {build.flags.lib_path}
compiler.size.cmd=arm-none-eabi-size

# this can be overriden in boards.txt
build.float_flags=-mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16 -u _printf_float
build.debug_flags=-DCFG_DEBUG=0
build.logger_flags=-DCFG_LOGGER=1
build.sysview_flags=-DCFG_SYSVIEW=0
build.support_at_flag=-DSUPPORT_AT
build.variant_h=variant.h

# common compiler for nrf
#rtos.path={build.core.path}/freertos
#nordic.path={runtime.platform.path}/cores/nRF5/external/nRF5_SDK/nRF5_SDK_17.0.2_d674dde
lora.path={runtime.platform.path}/cores/{build.core}/external/lora


# build.logger_flags and build.sysview_flags and intentionally empty,
# to allow modification via a user's own boards.local.txt or platform.local.txt files.
build.flags.default= {compiler.optimization_flag} {build.flags.feature} {build.debug_flags} {build.logger_flags} {build.sysview_flags} {build.flags.inc_path} {build.support_at_flag}
build.info.flags=-DVARIANT_H="{build.variant_h}"
build.info.flags=-D{build.series}


# usb flags
build.flags.usb= -DUSBCON -DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags= -DDEBUG
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.libraries.ldflags=
compiler.elf2bin.extra_flags=
compiler.elf2hex.extra_flags=


# Compile patterns
# ----------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} '-DARDUINO_BSP_VERSION="{version}"' {compiler.c.extra_flags} {build.extra_flags} {build.flags.default} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} '-DARDUINO_BSP_VERSION="{version}"' {compiler.cpp.extra_flags} {build.extra_flags} {build.flags.default} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {build.flags.default} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" "-L{build.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} "-L{build.core.path}/component/core/soc/apollo3" "-T{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" {compiler.ldflags} -o "{build.path}/{build.project_name}.elf" {object_files} {compiler.libraries.ldflags} -Wl,--start-group -lc -lm -lnosys -lstdc++ "{build.path}/{archive_file}" {build.flags.lib} -Wl,--end-group

## Create output (bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2bin.cmd}" {compiler.elf2bin.flags} {compiler.elf2bin.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Create dfu package zip file
recipe.objcopy.zip.1.pattern=python3 "{runtime.platform.path}/security/apollo3_scripts/ota_binary_converter.py" --load-address 0x14000 --appbin "{build.path}/{build.project_name}.bin" -o "{build.path}/{build.project_name}_Nonsecure_OTA_Package_UART"
recipe.objcopy.zip.1.pattern.windows="{runtime.platform.path}/security/apollo3_scripts/windows/ota_binary_converter.exe" --load-address 0x14000 --appbin "{build.path}/{build.project_name}.bin" -o "{build.path}/{build.project_name}_Nonsecure_OTA_Package_UART"
recipe.objcopy.zip.1.pattern.macosx="{runtime.platform.path}/security/apollo3_scripts/macosx/ota_binary_converter" --load-address 0x14000 --appbin "{build.path}/{build.project_name}.bin" -o "{build.path}/{build.project_name}_Nonsecure_OTA_Package_UART"
recipe.objcopy.zip.2.pattern=python3 "{runtime.platform.path}/security/apollo3_scripts/create_cust_image_blob.py" --bin "{build.path}/{build.project_name}.bin" --load-address 0x14000 --magic-num 0xC1 -o "{build.path}/{build.project_name}_Main_Nonsecure_OTA_BLOB" --version 0x0
recipe.objcopy.zip.2.pattern.windows="{runtime.platform.path}/security/apollo3_scripts/windows/create_cust_image_blob.exe" --bin "{build.path}/{build.project_name}.bin" --load-address 0x14000 --magic-num 0xC1 -o "{build.path}/{build.project_name}_Main_Nonsecure_OTA_BLOB" --version 0x0
recipe.objcopy.zip.2.pattern.macosx="{runtime.platform.path}/security/apollo3_scripts/macosx/create_cust_image_blob" --bin "{build.path}/{build.project_name}.bin" --load-address 0x14000 --magic-num 0xC1 -o "{build.path}/{build.project_name}_Main_Nonsecure_OTA_BLOB" --version 0x0
recipe.objcopy.zip.3.pattern=python3 "{runtime.platform.path}/security/apollo3_scripts/ota_binary_converter.py" --load-address 0x84000 --appbin "{build.path}/{build.project_name}_Main_Nonsecure_OTA_BLOB.bin" -o "{build.path}/{build.project_name}_Nonsecure_OTA_Package_BLE"
recipe.objcopy.zip.3.pattern.windows="{runtime.platform.path}/security/apollo3_scripts/windows/ota_binary_converter.exe" --load-address 0x84000 --appbin "{build.path}/{build.project_name}_Main_Nonsecure_OTA_BLOB.bin" -o "{build.path}/{build.project_name}_Nonsecure_OTA_Package_BLE"
recipe.objcopy.zip.3.pattern.macosx="{runtime.platform.path}/security/apollo3_scripts/macosx/ota_binary_converter" --load-address 0x84000 --appbin "{build.path}/{build.project_name}_Main_Nonsecure_OTA_BLOB.bin" -o "{build.path}/{build.project_name}_Nonsecure_OTA_Package_BLE"

## Save bin
recipe.output.tmp_file_bin={build.project_name}.bin
recipe.output.save_file_bin={build.project_name}.save.bin

## Save hex
recipe.output.tmp_file_hex={build.project_name}.hex
recipe.output.save_file_hexu={build.project_name}.save.hex

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data|)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss)\s+([0-9]+).*

## Export Compiled Binary
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.hex

#tools.uploader_ymodem.cmd="{runtime.tools.uploader_ymodem.path}/uploader_ymodem.py"
#tools.uploader_ymodem.cmd.windows="{runtime.tools.uploader_ymodem.path}/uploader_ymodem.exe"
#tools.uploader_ymodem.cmd.macosx=python3 "{runtime.tools.uploader_ymodem.path}/uploader_ymodem.py"

tools.uploader_ymodem.cmd=python3 "{runtime.platform.path}/security/apollo3_scripts/apollo3_uart_update_script.py"
tools.uploader_ymodem.cmd.windows="{runtime.platform.path}/security/apollo3_scripts/windows/apollo3_uart_update_script.exe"
tools.uploader_ymodem.cmd.macosx="{runtime.platform.path}/security/apollo3_scripts/macosx/apollo3_uart_update_script"

tools.uploader_ymodem.upload.params.verbose=--verbose
tools.uploader_ymodem.upload.params.quiet=
tools.uploader_ymodem.upload.pattern={cmd} -f "{build.path}/{build.project_name}_Nonsecure_OTA_Package_UART.bin" -p {serial.port}

#***************************************************
# prebuild hooks for buildtime
#***************************************************
recipe.hooks.sketch.prebuild.1.pattern=python3 "{runtime.tools.buildtime.path}/buildtime.py" "{runtime.platform.path}/variants/{build.variant}/version.c"
recipe.hooks.sketch.prebuild.1.pattern.windows="{runtime.tools.buildtime.path}/buildtime.exe" "{runtime.platform.path}/variants/{build.variant}/version.c"

#***************************************************
# Burning bootloader with Ambiq SBL
#***************************************************

# Bootloader version
tools.bootburn.bootloader.file={runtime.platform.path}/prebuilt/bootloader_apollo3_ota.bin

tools.bootburn.bootloader.params.verbose=
tools.bootburn.bootloader.params.quiet=
tools.bootburn.bootloader.pattern={program.burn_pattern} "{serial.port}" -f "{bootloader.file}" -i 6 -o 0xF8000

# erase flash page while programming
tools.bootburn.erase.params.verbose=
tools.bootburn.erase.params.quiet=
tools.bootburn.erase.pattern=
version=4.0.4
